import { EventEmitter } from '../events';
import { BoxModelElement } from './types/BoxModelElement';
import { Form } from './Form';
import { Collection } from './types/Collection';
import { GUID } from './types/GUID';
import { Point } from './types/Point';
import { Font } from './types/Font';
export declare class UIComponent extends EventEmitter {
    private __position__;
    private owner;
    private _parent;
    private _context;
    controls: Collection;
    private _height;
    private _width;
    private _injected;
    private _backgroundColor;
    private _foreColor;
    private _GUID;
    private _padding;
    private _margin;
    private _font;
    emit(eventName: string, eventArgs: Object): void;
    broadcast(eventName: string, eventArgs: Object, emitOnEvent?: boolean): void;
    react(eventName: string, eventArgs: Object): void;
    private _drawn;
    drawn: boolean;
    padding: BoxModelElement;
    margin: BoxModelElement;
    font: Font;
    id: GUID;
    hasId(): boolean;
    constructor(owner: Form);
    context: CanvasRenderingContext2D;
    isInjected: boolean;
    private _onUpdate();
    inBoundsOf(location: Point): boolean;
    backgroundColor: string;
    foreColor: string;
    height: any;
    width: any;
    getAbsoluteHeight(): any;
    getAbsoluteWidth(): any;
    top: number;
    left: number;
    position: Point;
    points(): Array<Point>;
    parent: UIComponent;
    hasParent(): boolean;
    redraw(): boolean;
    _render(): void;
    private _drawChildren();
    render(): void;
    __inject(parent: UIComponent): void;
    remove(): void;
    dispose(): void;
}
